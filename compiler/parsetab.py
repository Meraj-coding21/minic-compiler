
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEnonassocEQUALS_EQUALSNOT_EQUALSLESS_THANGREATER_THANDIVIDE ELSE EQUALS EQUALS_EQUALS GREATER_THAN IDENTIFIER IF INT LBRACE LESS_THAN LPAREN MINUS NOT_EQUALS NUMBER PLUS RBRACE RETURN RPAREN SEMICOLON TIMESprogram : functionfunction : INT IDENTIFIER LPAREN RPAREN LBRACE statements RBRACEstatements : statements statement\n| emptystatement : declaration\n| assignment\n| return_statement\n| if_statement\n| func_call_statementdeclaration : INT IDENTIFIER SEMICOLONassignment : IDENTIFIER EQUALS expression SEMICOLONreturn_statement : RETURN expression SEMICOLONif_statement : IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE\n| IF LPAREN expression RPAREN LBRACE statements RBRACEfunc_call_statement : IDENTIFIER LPAREN expression RPAREN SEMICOLONexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression EQUALS_EQUALS expression\n| expression NOT_EQUALS expression\n| expression LESS_THAN expression\n| expression GREATER_THAN expressionexpression : LPAREN expression RPARENexpression : IDENTIFIERexpression : NUMBERempty :'
    
_lr_action_items = {'INT':([0,7,8,9,13,14,15,16,17,18,29,32,43,55,56,57,58,60,61,62,],[3,-27,10,-4,-3,-5,-6,-7,-8,-9,-10,-12,-11,-15,-27,10,-14,-27,10,-13,]),'$end':([1,2,12,],[0,-1,-2,]),'IDENTIFIER':([3,7,8,9,10,13,14,15,16,17,18,19,22,23,25,28,29,32,33,34,35,36,37,38,39,40,43,55,56,57,58,60,61,62,],[4,-27,11,-4,21,-3,-5,-6,-7,-8,-9,26,26,26,26,26,-10,-12,26,26,26,26,26,26,26,26,-11,-15,-27,11,-14,-27,11,-13,]),'LPAREN':([4,11,19,20,22,23,25,28,33,34,35,36,37,38,39,40,],[5,23,25,28,25,25,25,25,25,25,25,25,25,25,25,25,]),'RPAREN':([5,26,27,31,41,42,45,46,47,48,49,50,51,52,53,],[6,-25,-26,44,53,54,-16,-17,-18,-19,-20,-21,-22,-23,-24,]),'LBRACE':([6,54,59,],[7,56,60,]),'RBRACE':([7,8,9,13,14,15,16,17,18,29,32,43,55,56,57,58,60,61,62,],[-27,12,-4,-3,-5,-6,-7,-8,-9,-10,-12,-11,-15,-27,58,-14,-27,62,-13,]),'RETURN':([7,8,9,13,14,15,16,17,18,29,32,43,55,56,57,58,60,61,62,],[-27,19,-4,-3,-5,-6,-7,-8,-9,-10,-12,-11,-15,-27,19,-14,-27,19,-13,]),'IF':([7,8,9,13,14,15,16,17,18,29,32,43,55,56,57,58,60,61,62,],[-27,20,-4,-3,-5,-6,-7,-8,-9,-10,-12,-11,-15,-27,20,-14,-27,20,-13,]),'EQUALS':([11,],[22,]),'NUMBER':([19,22,23,25,28,33,34,35,36,37,38,39,40,],[27,27,27,27,27,27,27,27,27,27,27,27,27,]),'SEMICOLON':([21,24,26,27,30,44,45,46,47,48,49,50,51,52,53,],[29,32,-25,-26,43,55,-16,-17,-18,-19,-20,-21,-22,-23,-24,]),'PLUS':([24,26,27,30,31,41,42,45,46,47,48,49,50,51,52,53,],[33,-25,-26,33,33,33,33,-16,-17,-18,-19,-20,-21,-22,-23,-24,]),'MINUS':([24,26,27,30,31,41,42,45,46,47,48,49,50,51,52,53,],[34,-25,-26,34,34,34,34,-16,-17,-18,-19,-20,-21,-22,-23,-24,]),'TIMES':([24,26,27,30,31,41,42,45,46,47,48,49,50,51,52,53,],[35,-25,-26,35,35,35,35,35,35,-18,-19,-20,-21,-22,-23,-24,]),'DIVIDE':([24,26,27,30,31,41,42,45,46,47,48,49,50,51,52,53,],[36,-25,-26,36,36,36,36,36,36,-18,-19,-20,-21,-22,-23,-24,]),'EQUALS_EQUALS':([24,26,27,30,31,41,42,45,46,47,48,49,50,51,52,53,],[37,-25,-26,37,37,37,37,37,37,37,37,None,None,None,None,-24,]),'NOT_EQUALS':([24,26,27,30,31,41,42,45,46,47,48,49,50,51,52,53,],[38,-25,-26,38,38,38,38,38,38,38,38,None,None,None,None,-24,]),'LESS_THAN':([24,26,27,30,31,41,42,45,46,47,48,49,50,51,52,53,],[39,-25,-26,39,39,39,39,39,39,39,39,None,None,None,None,-24,]),'GREATER_THAN':([24,26,27,30,31,41,42,45,46,47,48,49,50,51,52,53,],[40,-25,-26,40,40,40,40,40,40,40,40,None,None,None,None,-24,]),'ELSE':([58,],[59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function':([0,],[2,]),'statements':([7,56,60,],[8,57,61,]),'empty':([7,56,60,],[9,9,9,]),'statement':([8,57,61,],[13,13,13,]),'declaration':([8,57,61,],[14,14,14,]),'assignment':([8,57,61,],[15,15,15,]),'return_statement':([8,57,61,],[16,16,16,]),'if_statement':([8,57,61,],[17,17,17,]),'func_call_statement':([8,57,61,],[18,18,18,]),'expression':([19,22,23,25,28,33,34,35,36,37,38,39,40,],[24,30,31,41,42,45,46,47,48,49,50,51,52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function','program',1,'p_program','parser.py',13),
  ('function -> INT IDENTIFIER LPAREN RPAREN LBRACE statements RBRACE','function',7,'p_function','parser.py',17),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',21),
  ('statements -> empty','statements',1,'p_statements','parser.py',22),
  ('statement -> declaration','statement',1,'p_statement','parser.py',29),
  ('statement -> assignment','statement',1,'p_statement','parser.py',30),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',31),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',32),
  ('statement -> func_call_statement','statement',1,'p_statement','parser.py',33),
  ('declaration -> INT IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',37),
  ('assignment -> IDENTIFIER EQUALS expression SEMICOLON','assignment',4,'p_assignment','parser.py',41),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',45),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','if_statement',11,'p_if_statement','parser.py',49),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE','if_statement',7,'p_if_statement','parser.py',50),
  ('func_call_statement -> IDENTIFIER LPAREN expression RPAREN SEMICOLON','func_call_statement',5,'p_func_call_statement','parser.py',57),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',61),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',62),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',63),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',64),
  ('expression -> expression EQUALS_EQUALS expression','expression',3,'p_expression_binop','parser.py',65),
  ('expression -> expression NOT_EQUALS expression','expression',3,'p_expression_binop','parser.py',66),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression_binop','parser.py',67),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression_binop','parser.py',68),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',72),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var_ref','parser.py',76),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',80),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',84),
]
